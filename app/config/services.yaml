# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    jav_media_file_location: '%env(resolve:MEDIA_DIR)%'
    jav_media_thumb_directory: '%env(resolve:THUMB_DIR)%'
    xsendfile_route_root: '%env(resolve:XSENDFILE_ROUTE_ROOT)%'
    redis_uri: '%env(resolve:REDIS_URI)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:
            $javToolboxMediaFileLocation: '%jav_media_file_location%'
            $javToolboxMediaThumbDirectory: '%jav_media_thumb_directory%'
            $javMediaFileLocation: '%jav_media_file_location%'
            $XSendFileRoot: '%xsendfile_route_root%'


    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php,Service/FilenameParser/BaseParser.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\MessageHandler\:
        resource: '../src/MessageHandler'
        tags: ['messenger.message_handler']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    get_set_method_normalizer:
#        class: Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer
        class: App\Serializer\AppGetSetMethodNormalizer
        public: false
        tags: [serializer.normalizer]
