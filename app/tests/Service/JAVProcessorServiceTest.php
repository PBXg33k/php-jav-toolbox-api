<?php
namespace App\Tests\Service;

use App\Entity\JavFile;
use App\Entity\Title;
use App\Message\CheckVideoMessage;
use App\Message\GetVideoMetadataMessage;
use App\Message\ProcessFileMessage;
use App\Service\JAVNameMatcherService;
use App\Service\JAVProcessorService;
use App\Service\MediaProcessorService;
use Doctrine\ORM\EntityManagerInterface;
use org\bovigo\vfs\content\LargeFileContent;
use org\bovigo\vfs\vfsStream;
use org\bovigo\vfs\vfsStreamDirectory;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\Messenger\Envelope;
use Symfony\Component\Messenger\MessageBusInterface;

class JAVProcessorServiceTest extends TestCase
{
    /**
     * @var MockObject
     */
    protected $logger;

    /**
     * @var MockObject
     */
    protected $dispatcher;

    /**
     * @var MockObject
     */
    protected $entityManager;

    /**
     * @var JAVProcessorService
     */
    protected $service;

    /**
     * @var vfsStreamDirectory
     */
    private $mediaRoot;

    /**
     * @var MockObject
     */
    private $mediaProcessorService;

    /**
     * @var MockObject
     */
    private $messageBus;

    /**
     * @var MockObject|JAVNameMatcherService
     */
    private $javRenameService;

    /**
     * @var vfsStreamDirectory
     */
    private $mediaThumbRoot;

    public function setUp()
    {
        $this->logger                   = $this->createMock(LoggerInterface::class);
        $this->dispatcher               = $this->createMock(EventDispatcherInterface::class);
        $this->entityManager            = $this->createMock(EntityManagerInterface::class);
        $this->mediaProcessorService    = $this->createMock(MediaProcessorService::class);
        $this->messageBus               = $this->createMock(MessageBusInterface::class);
        $this->javRenameService         = $this->createMock(JAVNameMatcherService::class);

        $this->mediaRoot                = vfsStream::setup('media');
        $this->mediaThumbRoot           = vfsStream::setup('thumb');

        $this->service = new JAVProcessorService(
            $this->logger,
            $this->dispatcher,
            $this->entityManager,
            $this->mediaProcessorService,
            $this->messageBus,
            $this->javRenameService,
            $this->mediaRoot->url(),
            $this->mediaThumbRoot->url()
        );

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function willDispatchMessageForProcessingFile()
    {
        $javFile = (new JavFile())->setId(39);


        $this->logger->expects($this->once())
            ->method('info');

        $this->logger->expects($this->once())
            ->method('debug');

        $this->messageBus->expects($this->once())
            ->method('dispatch')
            ->with(
                $this->callback(function($subject) {
                    return $this->isInstanceOf(ProcessFileMessage::class) &&
                        $subject->getJavFileId() === 39;
                })
            )
            ->willReturn(new Envelope(new ProcessFileMessage(39)));

        $this->service->processFile($javFile);
    }

    /**
     * @test
     */
    public function willDispatchMessageForMetadata()
    {
        $javFile = (new JavFile())->setId(39);

        $this->logger->expects($this->once())
            ->method('info');

        $this->logger->expects($this->once())
            ->method('debug');

        $this->messageBus->expects($this->once())
            ->method('dispatch')
            ->with(
                $this->callback(function($subject) {
                    return $this->isInstanceOf(GetVideoMetadataMessage::class) &&
                        $subject->getJavFileId() === 39;
                })
            )
            ->willReturn(new Envelope(new GetVideoMetadataMessage(39)));


        $this->service->processFile($javFile);
    }

    /**
     * @test
     */
    public function willDispatchMessageToCheckVideoConsistency()
    {
        $javFile = (new JavFile())->setId(39);

        $this->entityManager->expects($this->once())
            ->method('contains')
            ->with($this->identicalTo($javFile))
            ->willReturn(true);

        $this->logger->expects($this->once())
            ->method('notice');

        $this->messageBus->expects($this->once())
            ->method('dispatch')
            ->with(
                $this->callback(function($subject) {
                    return $this->isInstanceOf(CheckVideoMessage::class) &&
                        $subject->getJavFileId() === 39;
                })
            )
            ->willReturn(new Envelope(new CheckVideoMessage(39)));

        $this->service->checkVideoConsistency($javFile);
    }

    /**
     * @test
     */
    public function willPersistEntityBeforeDispatchingMessageToCheckVideoConsistency()
    {
        $javFile = (new JavFile())->setId(39);

        $this->entityManager->expects($this->once())
            ->method('contains')
            ->with($this->identicalTo($javFile))
            ->willReturn(false);

        $this->entityManager->expects($this->once())
            ->method('persist')
            ->willReturn($this->identicalTo($javFile));

        $this->logger->expects($this->once())
            ->method('notice');

        $this->messageBus->expects($this->once())
            ->method('dispatch')
            ->with(
                $this->callback(function($subject) {
                    return $this->isInstanceOf(CheckVideoMessage::class) &&
                        $subject->getJavFileId() === 39;
                })
            )
            ->willReturn(new Envelope(new CheckVideoMessage(39)));

        $this->service->checkVideoConsistency($javFile);
    } 

    /**
     * @test
     */
    public function willNotProcessInvalidJAVJackFile()
    {
        $invalidJavJackDownloads = [
            '315fbdc5be96ec692e2920bdb33b3d98',
            '5d2007905b0cc7f7b244490613eb9433',
            'videoplayback'
        ];

        foreach($invalidJavJackDownloads as $invalidJavJackDownload) {
            $this->createTestForInvalidJAVJack($invalidJavJackDownload);
        }
    }

    private function createTestForInvalidJAVJack(string $filename) {
        $javFile = (new JavFile())->setPath("/media/{$filename}.mp4");

        $this->logger->expects($this->any())
            ->method('warning')
            ->with(JAVProcessorService::LOG_UNKNOWN_JAVJACK);

        $this->assertFalse($this->service::shouldProcessFile($javFile, $this->logger));
    }

    /**
     * @test
     */
    public function willNotProcessBlacklistedFilenames()
    {
        $javFile = (new JavFile())->setFilename(join('-', ['aaa', JAVProcessorService::$blacklistnames[0], '02.avi']));

        $this->logger->expects($this->once())
            ->method('warning')
            ->with(JAVProcessorService::LOG_BLACKLIST_NAME);

        $this->assertFalse($this->service::shouldProcessFile($javFile, $this->logger));
    }

    /**
     * @test
     */
    public function extractsIDFromFilename()
    {
        $title = new Title();

        $filenameVariation = "[ABC-123].mp4";

        $title
            ->setCatalognumber('ABC-123');

        $testFile = vfsStream::newFile($filenameVariation)
            ->withContent(LargeFileContent::withKilobytes(9001))
            ->at($this->mediaRoot);

        $title->addFile((new JavFile())->setFilename($filenameVariation)->setPath($testFile->url()));

        $finfo = new \SplFileInfo($testFile->url());

        $this->javRenameService->expects($this->once())
            ->method('extractIDFromFileInfo')
            ->with($finfo)
            ->willReturn($title);

        $processedFilenameResult = $this->service->extractIDFromFilename($finfo);

        $this->assertSame($title->getCatalognumber(), $processedFilenameResult->getCatalognumber());

        $this->assertSame(
            $title->getFiles()->first()->getFilename(),
            $processedFilenameResult->getFiles()->first()->getFilename());
    }
}
