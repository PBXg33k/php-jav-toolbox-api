<?php
namespace App\Tests\Service;

use App\Entity\Inode;
use App\Entity\JavFile;
use App\Entity\Title;
use App\Event\JavFileUpdatedEvent;
use App\Message\CheckVideoMessage;
use App\Message\GetVideoMetadataMessage;
use App\Message\ProcessFileMessage;
use App\Service\JAVNameMatcherService;
use App\Service\JAVProcessorService;
use App\Service\MediaProcessorService;
use Doctrine\ORM\EntityManagerInterface;
use org\bovigo\vfs\content\LargeFileContent;
use org\bovigo\vfs\content\FileContent;
use org\bovigo\vfs\vfsStream;
use org\bovigo\vfs\vfsStreamDirectory;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;
use Psr\Cache\CacheItemInterface;
use Psr\Cache\CacheItemPoolInterface;
use Psr\Log\LoggerInterface;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\Messenger\Envelope;
use Symfony\Component\Messenger\MessageBusInterface;

class JAVProcessorServiceTest extends TestCase
{
    /**
     * @var MockObject
     */
    protected $logger;

    /**
     * @var MockObject
     */
    protected $dispatcher;

    /**
     * @var MockObject
     */
    protected $entityManager;

    /**
     * @var JAVProcessorService
     */
    protected $service;

    /**
     * @var vfsStreamDirectory
     */
    private $mediaRoot;

    /**
     * @var MockObject
     */
    private $mediaProcessorService;

    /**
     * @var MockObject
     */
    private $messageBus;

    /**
     * @var MockObject|CacheItemPoolInterface
     */
    private $cache;

    /**
     * @var MockObject|JAVNameMatcherService
     */
    private $javNameMatcherService;

    /**
     * @var vfsStreamDirectory
     */
    private $mediaThumbRoot;

    private $videoConsistencyIteration = 0;

    public function setUp()
    {
        $this->logger                   = $this->createMock(LoggerInterface::class);
        $this->dispatcher               = $this->createMock(EventDispatcherInterface::class);
        $this->entityManager            = $this->createMock(EntityManagerInterface::class);
        $this->mediaProcessorService    = $this->createMock(MediaProcessorService::class);
        $this->messageBus               = $this->createMock(MessageBusInterface::class);
        $this->javNameMatcherService    = $this->createMock(JAVNameMatcherService::class);
        $this->cache                    = $this->createMock(CacheItemPoolInterface::class);

        $this->mediaRoot                = vfsStream::setup('media');
        $this->mediaThumbRoot           = vfsStream::setup('thumb');

        $this->service                  = new JAVProcessorService(
            $this->logger,
            $this->dispatcher,
            $this->entityManager,
            $this->mediaProcessorService,
            $this->messageBus,
            $this->javNameMatcherService,
            $this->cache,
            $this->mediaRoot->url(),
            $this->mediaThumbRoot->url()
        );

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function willDispatchMessageForProcessingFile()
    {
        $javFile = (new JavFile())->setId(39);

        $this->logger->expects($this->once())
            ->method('info');

        $this->logger->expects($this->once())
            ->method('debug');

        $this->messageBus->expects($this->once())
            ->method('dispatch')
            ->with(
                $this->callback(function($subject) {
                    return $this->isInstanceOf(ProcessFileMessage::class) &&
                        $subject->getJavFileId() === 39;
                })
            )
            ->willReturn(new Envelope(new ProcessFileMessage(39)));

        $this->service->processFile($javFile);
    }

    /**
     * @test
     */
    public function willDispatchMessageForMetadata()
    {
        $javFile = (new JavFile())->setId(39);

        $this->logger->expects($this->once())
            ->method('info');

        $this->logger->expects($this->once())
            ->method('debug');

        $this->messageBus->expects($this->once())
            ->method('dispatch')
            ->with(
                $this->callback(function($subject) {
                    return $this->isInstanceOf(GetVideoMetadataMessage::class) &&
                        $subject->getJavFileId() === 39;
                })
            )
            ->willReturn(new Envelope(new GetVideoMetadataMessage(39)));


        $this->service->processFile($javFile);
    }

    /**
     * @test
     */
    public function willDispatchMessageToCheckVideoConsistency()
    {
        $javFile = (new JavFile())->setId(39);

        $this->entityManager->expects($this->once())
            ->method('contains')
            ->with($this->identicalTo($javFile))
            ->willReturn(true);

        $this->logger->expects($this->once())
            ->method('notice');

        $this->messageBus->expects($this->once())
            ->method('dispatch')
            ->with(
                $this->callback(function($subject) {
                    return $this->isInstanceOf(CheckVideoMessage::class) &&
                        $subject->getJavFileId() === 39;
                })
            )
            ->willReturn(new Envelope(new CheckVideoMessage(39)));

        $this->service->checkVideoConsistency($javFile);
    }

    /**
     * @test
     */
    public function willPersistEntityBeforeDispatchingMessageToCheckVideoConsistency()
    {
        $javFile = (new JavFile())->setId(39);

        $this->entityManager->expects($this->once())
            ->method('contains')
            ->with($this->identicalTo($javFile))
            ->willReturn(false);

        $this->dispatcher->expects($this->once())
            ->method('dispatch')
            ->with(
                $this->equalTo(JavFileUpdatedEvent::NAME),
                $this->isInstanceOf(JavFileUpdatedEvent::class)
            );

        $this->logger->expects($this->once())
            ->method('notice');

        $this->messageBus->expects($this->once())
            ->method('dispatch')
            ->with(
                $this->callback(function($subject) {
                    return $this->isInstanceOf(CheckVideoMessage::class) &&
                        $subject->getJavFileId() === 39;
                })
            )
            ->willReturn(new Envelope(new CheckVideoMessage(39)));

        $this->service->checkVideoConsistency($javFile);
    } 

    /**
     * @test
     */
    public function willNotProcessInvalidJAVJackFile()
    {
        $invalidJavJackDownloads = [
            '315fbdc5be96ec692e2920bdb33b3d98',
            '5d2007905b0cc7f7b244490613eb9433',
            'videoplayback'
        ];

        foreach($invalidJavJackDownloads as $invalidJavJackDownload) {
            $javFile = (new JavFile())->setPath("/media/{$invalidJavJackDownload}.mp4")->setFilename("{$invalidJavJackDownload}.mp4");

            $this->logger->expects($this->any())
                ->method('warning')
                ->with(JAVProcessorService::LOG_UNKNOWN_JAVJACK);

            $this->assertFalse($this->service::shouldProcessFile($javFile, $this->logger));
        }
    }

    /**
     * @test
     */
    public function willNotProcessBlacklistedFilenames()
    {
        $javFile = (new JavFile())->setFilename(join('-', ['aaa', JAVProcessorService::$blacklistnames[0], '02.avi']));

        $this->logger->expects($this->once())
            ->method('warning')
            ->with(JAVProcessorService::LOG_BLACKLIST_NAME);

        $this->assertFalse($this->service::shouldProcessFile($javFile, $this->logger));
    }

    /**
     * @test
     */
    public function extractsIDFromFilename()
    {
        $title = new Title();

        $filenameVariation = "[ABC-123].mp4";

        $title
            ->setCatalognumber('ABC-123');

        $testFile = $this->createMockFile($filenameVariation, LargeFileContent::withKilobytes(9001), $this->mediaRoot);

        $title->addFile((new JavFile())->setFilename($filenameVariation)->setPath($testFile->url()));

        $finfo = new \SplFileInfo($testFile->url());
        $cachItem = $this->createMock(CacheItemInterface::class);

        $cachItem->expects($this->once())
            ->method('isHit')
            ->willReturn(false);

        $this->cache->expects($this->once())
            ->method('getItem')
            ->willReturn($cachItem);

        $this->javNameMatcherService->expects($this->once())
            ->method('extractIDFromFileInfo')
            ->with($finfo)
            ->willReturn($title);

        $processedFilenameResult = $this->service->extractIDFromFilename($finfo);

        $this->assertSame($title->getCatalognumber(), $processedFilenameResult->getCatalognumber());

        $this->assertSame(
            $title->getFiles()->first()->getFilename(),
            $processedFilenameResult->getFiles()->first()->getFilename());
    }

    public function testFilenameContainsID()
    {
        $input = new \SplFileInfo($this->mediaRoot->url());

        $cachItem = $this->createMock(CacheItemInterface::class);

        $cachItem->expects($this->once())
            ->method('isHit')
            ->willReturn(false);

        $this->cache->expects($this->once())
            ->method('getItem')
            ->willReturn($cachItem);

        $this->javNameMatcherService->expects($this->once())
            ->method('extractIDFromFileInfo')
            ->with($input)
            ->willReturn(new Title());

        $this->assertsame(true, $this->service->filenameContainsID($input));
    }

    public function testGetMetadata()
    {
        $this->logger->expects($this->once())
            ->method('notice');

        $this->messageBus->expects($this->once())
            ->method('dispatch')
            ->with(
                $this->callback(function($subject) {
                    return $this->isInstanceOf(GetVideoMetadataMessage::class) &&
                        $subject->getJavFileId() === 1;
                })
            )
            ->willReturn(new Envelope(new GetVideoMetadataMessage(1)));

        $this->service->getMetadata((new JavFile())->setId(1));
    }

    public function testCheckVideoConsistencyPersisted()
    {
        $javFile = (new JavFile())->setId(1);

        $this->setCheckVideoAssertions($javFile, false);

        $this->service->checkVideoConsistency($javFile);
    }

    public function testCheckVideoConsistencyNotPersisted()
    {
        $javFile = (new JavFile())->setId(1);

        $this->setCheckVideoAssertions($javFile, true);

        $this->service->checkVideoConsistency($javFile);
    }

    public function testCheckJAVFilesConsistency()
    {
        $title = (new Title())
            ->addFile((new JavFile())->setId(1)->setInode((new Inode())->setChecked(false)));

        $this->setCheckVideoAssertions($title->getFiles()->first());

        $this->service->checkJAVFilesConsistency($title);
    }

    public function testCheckMultiFileJAVFilesConsistency()
    {
        $title = (new Title())
            ->addFile((new JavFile())->setId(1)->setInode((new Inode())->setChecked(false)))
            ->addFile((new JavFile())->setId(2)->setInode((new Inode())->setChecked(false)));

        $title->getFiles()->forAll(function($key, $item) {
            return $this->setCheckVideoAssertions($item, true);
        });

        $this->service->checkJAVFilesConsistency($title);
    }

    private function setCheckVideoAssertions(JavFile $javFile, bool $persisted = false)
    {
        $this->entityManager->expects($this->at($this->videoConsistencyIteration))
            ->method('contains')
            ->with($javFile)
            ->willReturn($persisted);

        if(!$persisted) {
            $this->dispatcher->expects($this->once())
                ->method('dispatch')
                ->with(
                    $this->equalTo(JavFileUpdatedEvent::NAME),
                    $this->isInstanceOf(JavFileUpdatedEvent::class)
                );
        }

        $this->logger->expects($this->at($this->videoConsistencyIteration))
            ->method('notice');

        $this->messageBus->expects($this->at($this->videoConsistencyIteration))
            ->method('dispatch')
            ->with(
                $this->callback(function($subject) use ($javFile) {
                    return $this->isInstanceOf(CheckVideoMessage::class) &&
                        $subject->getJavFileId() === $javFile->getId();
                })
            )
            ->willReturn(new Envelope(new CheckVideoMessage($javFile->getId())));

        ++$this->videoConsistencyIteration;

        return true;
    }

    public function fileExistWillCheckInodeForExistence()
    {

    }

    private function createMockFile($filename, FileContent $size, $location)
    {
        return vfsStream::newFile($filename)->withContent($size)->at($location);
    }

}
