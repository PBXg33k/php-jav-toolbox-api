<?php
namespace App\Tests\Service;

use App\Entity\JavFile;
use App\Entity\Title;
use App\Service\JAVRenamerService;
use org\bovigo\vfs\content\LargeFileContent;
use org\bovigo\vfs\vfsStream;
use org\bovigo\vfs\vfsStreamDirectory;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;
use Symfony\Component\Filesystem\Filesystem;

class JAVRenamerServiceTest extends TestCase
{
    /**
     * @var vfsStreamDirectory
     */
    private $rootFs;

    /**
     * @var MockObject|LoggerInterface
     */
    private $logger;

    /**
     * @var MockObject|Filesystem
     */
    private $filesystem;

    /**
     * @var JAVRenamerService
     */
    private $service;

    protected function setUp()
    {
        $this->logger      = $this->createMock(LoggerInterface::class);
        $this->filesystem  = $this->createMock(Filesystem::class);

        $this->service     = new JAVRenamerService($this->logger);
        $this->service->setFilesystem($this->filesystem);
        $this->rootFs           = vfsStream::setup('testDir');

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function testHappyPath()
    {
        $testFile = vfsStream::newFile('ABC123.mkv')
            ->withContent(LargeFileContent::withKilobytes(9001))
            ->at($this->rootFs);

        $title = (new Title())
            ->setCatalognumber('ABC-123')
            ->addFile(
                (new JavFile())
                    ->setPath($testFile->url())
                    ->setPart(1)
            );

        $this->filesystem->expects($this->once())
            ->method('exists')
            ->willReturn(true);

        $this->logger->expects($this->once())
            ->method('info');

        $this->filesystem->expects($this->once())
            ->method('rename')
            ->with(
                $testFile->url(),
                pathinfo($testFile->url(), PATHINFO_DIRNAME).'/[ABC-123]-1.mkv'
            );

        $this->service->renameFile($title);
    }

    /**
     * @test
     * @expectedException Symfony\Component\Filesystem\Exception\FileNotFoundException
     */
    public function willThrowExceptionIfSourceFileIsNotFound()
    {
        $title = (new Title)
            ->addFile((new JavFile())->setPath('/nonexistent'));

        $this->service->renameFile($title);
    }
}
