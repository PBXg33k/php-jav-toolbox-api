<?php
namespace App\Tests\Service;

use App\Event\QualifiedVideoFileFound;
use App\Service\FileScanService;
use App\Service\JAVProcessorService;
use org\bovigo\vfs\content\LargeFileContent;
use org\bovigo\vfs\vfsStream;
use org\bovigo\vfs\vfsStreamDirectory;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;

class FileScanServiceTest extends TestCase
{
    /**
     * @var vfsStreamDirectory
     */
    private $rootFs;

    /**
     * @var MockObject|LoggerInterface
     */
    private $logger;

    /**
     * @var MockObject|EventDispatcherInterface
     */
    private $eventDispatcher;

    /**
     * @var MockObject|JAVProcessorService
     */
    private $javProcessorService;

    /**
     * @var FileScanService
     */
    private $fileScanService;

    protected function setUp()
    {
        $this->logger               = $this->createMock(LoggerInterface::class);
        $this->eventDispatcher      = $this->createMock(EventDispatcherInterface::class);
        $this->javProcessorService  = $this->createMock(JAVProcessorService::class);
        $this->fileScanService      = new FileScanService(
            $this->logger,
            $this->eventDispatcher,
            $this->javProcessorService
        );

        $this->rootFs = vfsStream::setup('testDir');

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function willFindFile()
    {
        // Mock file which will be processed
        vfsStream::newFile('ABC-123.mkv')
            ->withContent(new LargeFileContent(500000000))
            ->at($this->rootFs);

        // Mock file which will be ignored (too small)
        vfsStream::newFile('ABC-124.mp4')
            ->withContent(LargeFileContent::withMegabytes(5))
            ->at($this->rootFs);

        $this->eventDispatcher->expects($this->once())->method('dispatch')
            ->with(
                $this->equalTo(QualifiedVideoFileFound::NAME),
                $this->isInstanceOf(QualifiedVideoFileFound::class)
            );

        $this->javProcessorService->expects($this->once())
            ->method('filenameContainsID')
            ->willReturn(true);

        $this->fileScanService->scanDir($this->rootFs->url());

        $this->assertInstanceOf(\SplFileInfo::class, $this->fileScanService->getFiles()->first());
    }
}
